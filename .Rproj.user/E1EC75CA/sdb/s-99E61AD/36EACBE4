{
    "collab_server" : "",
    "contents" : "#' Query Statcast and PITCHf/x Data for Pitchers from baseballsavant.mlb.com\n#' Code Provided by baseballr written by Bill Petti\n#'\n#' This function allows you to query Statcast and PITCHf/x data as provided on baseballsavant.mlb.com and have that data returned as a dataframe. Query returns data for all pitchers over a single, given time frame.\n#' @param start_date Date of first game for which you want data. Format must be in Y-d-m format.\n#' @param end_date Date of last game for which you want data. Format must be in Y-d-m format.\n#' @keywords MLB, sabermetrics, Statcast\n#' @importFrom utils read.csv\n#' @export\n#' @examples\n#' \\dontrun{\n#' scrape_statcast_savant_pitcher(start_date = \"2016-04-06\",\n#' end_date = \"2016-04-15\", pitcherid = 592789)\n#' }\nloader(\"dpylr\");loader(\"data.table\")\nstatcast_scrape_pitching_single <- function(start_date, end_date) {\n  # Check to make sure args are in the correct format.\n  if(!is.character(start_date) | !is.character(end_date)) {\n    warning(\"Please wrap your dates in quotations in 'yyyy-mm-dd' format.\")\n    return(NULL)\n  }\n  # Check for other user errors.\n  if(as.Date(start_date)<=\"2015-03-01\") { # March 1, 2015 was the first date of Spring Training.\n    message(\"Some metrics such as Exit Velocity and Batted Ball Events have only been compiled since 2015.\")\n  }\n  if(as.Date(start_date)<=\"2008-03-25\") { # March 25, 2008 was the first date of Spring Training.\n    stop(\"The data are limited to the 2008 MLB season and after.\")\n    return(NULL)\n  }\n  if(as.Date(start_date)==Sys.Date()) {\n    message(\"The data are collected daily at 3 a.m. Some of today's games may not be included.\")\n  }\n  if(as.Date(start_date)>as.Date(end_date)) {\n    stop(\"The start date is later than the end date.\")\n    return(NULL)\n  }\n\n  # extract season from start_date\n\n  year <- substr(start_date, 1,4)\n\n  # Base URL.\n  url <- paste0(\"https://baseballsavant.mlb.com/statcast_search/csv?all=true&hfPT=&hfAB=&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7CPO%7CS%7C&hfC=&hfSea=\", year, \"%7C&hfSit=&player_type=pitcher&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=\",start_date,\"&game_date_lt=\",end_date,\"&team=&position=&hfRO=&home_road=&hfFlag=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_abs=0&type=details&\")\n\n  # Do a try/catch to show errors that the user may encounter while downloading.\n  tryCatch(\n    {\n      print(\"These data are from BaseballSevant and are property of MLB Advanced Media, L.P. All rights reserved.\")\n      print(\"Grabbing data, this may take a minute...\")\n      payload <- data.table::fread(url)\n\n    },\n    error=function(cond) {\n      message(paste(\"URL does not seem to exist, please check your Internet connection:\"))\n      message(\"Original error message:\")\n      message(cond)\n      return(NA)\n    },\n    warning=function(cond) {\n      message(paste(\"URL caused a warning. Make sure your date range is correct:\"))\n      message(\"Original warning message:\")\n      message(cond)\n      return(NULL)\n    }\n  )\n  # Clean up formatting.\n  payload[payload==\"null\"] <- NA\n  payload$game_date <- as.Date(payload$game_date, \"%Y-%m-%d\")\n  payload$des <- as.character(payload$des)\n  payload$game_pk <- as.character(payload$game_pk) %>% as.numeric()\n  payload$on_1b <- as.character(payload$on_1b) %>% as.numeric()\n  payload$on_2b <- as.character(payload$on_2b) %>% as.numeric()\n  payload$on_3b <- as.character(payload$on_3b) %>% as.numeric()\n  payload$release_pos_x <- as.character(payload$release_pos_x) %>% as.numeric()\n  payload$release_pos_z <- as.character(payload$release_pos_z) %>% as.numeric()\n  payload$release_pos_y <- as.character(payload$release_pos_y) %>% as.numeric()\n  payload$hit_distance_sc <- as.character(payload$hit_distance_sc) %>% as.numeric()\n  payload$launch_speed <- as.character(payload$launch_speed) %>% as.numeric()\n  payload$launch_angle <- as.character(payload$launch_angle) %>% as.numeric()\n  payload$effective_speed <- as.character(payload$effective_speed) %>% as.numeric()\n  payload$release_spin_rate <- as.character(payload$release_spin_rate) %>% as.numeric()\n  payload$release_speed <- as.character(payload$release_speed) %>% as.numeric()\n  payload$release_extension <- as.character(payload$release_extension) %>% as.numeric()\n  payload$pfx_x<-as.character(payload$pfx_x) %>% as.numeric()\n  payload$pfx_z<-as.character(payload$pfx_z) %>% as.numeric()\n  payload$plate_x<-as.character(payload$plate_x) %>% as.numeric()\n  payload$plate_z<-as.character(payload$plate_z) %>% as.numeric()\n  payload$sz_top<-as.character(payload$sz_top) %>% as.numeric()\n  payload$sz_bot<-as.character(payload$sz_bot) %>% as.numeric()\n  payload$hc_x<-as.character(payload$hc_x) %>% as.numeric()\n  payload$hc_y<-as.character(payload$hc_y) %>% as.numeric()\n  payload$barrel <- with(payload, ifelse(launch_angle <= 50 & launch_speed >= 98 & launch_speed * 1.5 - launch_angle >= 11 & launch_speed + launch_angle >= 124, 1, 0))\n  message(\"URL read and payload acquired successfully.\")\n\n  return(payload)\n\n}\n",
    "created" : 1510069735759.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2798426644",
    "id" : "36EACBE4",
    "lastKnownWriteTime" : 1510070421,
    "last_content_update" : 1510070421544,
    "path" : "~/Baseball/baseballDB/R/statcast_scrape_pitching_single.R",
    "project_path" : "R/statcast_scrape_pitching_single.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}